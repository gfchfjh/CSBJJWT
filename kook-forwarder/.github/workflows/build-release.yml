name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  # ==================== Windows ====================
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build Python backend
        run: |
          cd backend
          pyinstaller --clean build_backend_enhanced.spec
      
      - name: Build Vue frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Electron installer
        run: |
          cd frontend
          npm run electron:build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: frontend/dist-electron/*.exe
  
  # ==================== macOS ====================
  build-macos:
    name: Build macOS Installer
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Prepare Redis
        run: |
          brew install redis
          mkdir -p redis
          cp $(which redis-server) redis/redis-server-mac
      
      - name: Build Python backend
        run: |
          cd backend
          pyinstaller --clean build_backend_enhanced.spec
      
      - name: Build Vue frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Electron installer
        run: |
          cd frontend
          npm run electron:build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 如需代码签名，添加以下环境变量
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-installer
          path: frontend/dist-electron/*.dmg
  
  # ==================== Linux ====================
  build-linux:
    name: Build Linux Installer
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgtk-3-dev libnotify-dev libnss3 libxss1 libxtst6
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build Redis
        run: |
          wget https://download.redis.io/releases/redis-7.0.15.tar.gz
          tar -xzf redis-7.0.15.tar.gz
          cd redis-7.0.15
          make -j$(nproc)
          mkdir -p ../redis
          cp src/redis-server ../redis/redis-server-linux
          cd ..
          rm -rf redis-7.0.15 redis-7.0.15.tar.gz
      
      - name: Build Python backend
        run: |
          cd backend
          pyinstaller --clean build_backend_enhanced.spec
      
      - name: Build Vue frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Electron installer
        run: |
          cd frontend
          npm run electron:build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-installers
          path: |
            frontend/dist-electron/*.AppImage
            frontend/dist-electron/*.deb
            frontend/dist-electron/*.rpm
  
  # ==================== Release ====================
  create-release:
    name: Create GitHub Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: List artifacts
        run: |
          ls -R
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-installer/*.exe
            macos-installer/*.dmg
            linux-installers/*.AppImage
            linux-installers/*.deb
            linux-installers/*.rpm
          body_path: RELEASE_NOTES_v6.0.0.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify success
        run: |
          echo "✅ Release created successfully!"
          echo "Download URL: https://github.com/${{ github.repository }}/releases/latest"
