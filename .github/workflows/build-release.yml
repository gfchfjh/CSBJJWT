name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  APP_NAME: KOOK-Forwarder
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Windows 构建
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller playwright
          playwright install chromium --with-deps

      - name: Build backend
        run: |
          cd backend
          pyinstaller build_backend_enhanced.spec --clean --noconfirm

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Electron (Windows)
        run: |
          cd frontend
          npm run electron:build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe

  # macOS 构建
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          brew install redis
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller playwright
          playwright install chromium

      - name: Build backend
        run: |
          cd backend
          pyinstaller build_backend_enhanced.spec --clean --noconfirm

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Electron (macOS ${{ matrix.arch }})
        run: |
          cd frontend
          npm run electron:build:mac -- --${{ matrix.arch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.arch }}-installer
          path: dist/*.dmg

  # Linux 构建
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev

      - name: Build Redis
        run: |
          wget https://download.redis.io/releases/redis-7.0.0.tar.gz
          tar xzf redis-7.0.0.tar.gz
          cd redis-7.0.0
          make
          mkdir -p ../build/redis
          cp src/redis-server ../build/redis/

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller playwright
          playwright install chromium --with-deps

      - name: Build backend
        run: |
          cd backend
          pyinstaller build_backend_enhanced.spec --clean --noconfirm

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Electron (Linux)
        run: |
          cd frontend
          npm run electron:build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-installer
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm

  # 创建 Release
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-installer/*.exe
            macos-x64-installer/*.dmg
            macos-arm64-installer/*.dmg
            linux-installer/*.AppImage
            linux-installer/*.deb
            linux-installer/*.rpm
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to Storage (Optional)
        if: env.AWS_S3_BUCKET != ''
        run: |
          aws s3 sync windows-installer s3://${{ secrets.AWS_S3_BUCKET }}/releases/${{ github.ref_name }}/windows/
          aws s3 sync macos-x64-installer s3://${{ secrets.AWS_S3_BUCKET }}/releases/${{ github.ref_name }}/macos-x64/
          aws s3 sync macos-arm64-installer s3://${{ secrets.AWS_S3_BUCKET }}/releases/${{ github.ref_name }}/macos-arm64/
          aws s3 sync linux-installer s3://${{ secrets.AWS_S3_BUCKET }}/releases/${{ github.ref_name }}/linux/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
