name: Build Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v18.0.0)'
        required: false
        default: 'v18.0.0'

jobs:
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Get version from tag or input
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm ci --legacy-peer-deps
      
      - name: Install backend dependencies
        working-directory: backend
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build frontend (Vite)
        working-directory: frontend
        run: |
          npm run build
      
      - name: Build Electron app for Windows
        working-directory: frontend
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run electron:build:win
      
      - name: Build Python backend with PyInstaller
        working-directory: backend
        run: |
          pyinstaller ../build/pyinstaller.spec
      
      - name: Prepare release directory
        shell: bash
        run: |
          mkdir -p release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows
          mkdir -p release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/frontend
          mkdir -p release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/backend
          mkdir -p release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/docs
      
      - name: Copy Electron installer
        shell: bash
        run: |
          cp frontend/dist-electron/*.exe release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/frontend/ || true
          cp frontend/dist-electron/*.zip release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/frontend/ || true
      
      - name: Copy Python backend
        shell: bash
        run: |
          cp -r backend/dist/kook-forwarder-backend release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/backend/
      
      - name: Copy documentation
        shell: bash
        run: |
          cp README.md release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/
          cp BUILD_SUCCESS_REPORT.md release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/ || true
          cp SYSTEM_COMPLETION_REPORT.md release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/docs/ || true
      
      - name: Create installation guide
        shell: bash
        run: |
          cat > release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/安装说明.txt << 'EOF'
          KOOK消息转发系统 ${{ steps.version.outputs.version }} - Windows安装指南
          
          快速开始:
          1. 解压此文件夹到任意位置
          2. 进入 frontend 目录
          3. 双击运行 KOOK消息转发系统.exe
          4. 首次运行会自动启动后端服务
          
          系统要求:
          - Windows 10/11 (64位)
          - 4 GB RAM
          - 1 GB 磁盘空间
          
          遇到问题?
          - 查看 README.md
          - 访问 https://github.com/gfchfjh/CSBJJWT/issues
          EOF
      
      - name: Create ZIP archive
        shell: bash
        run: |
          cd release
          7z a -tzip KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows/
      
      - name: Generate checksums
        shell: bash
        run: |
          cd release
          certutil -hashfile KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip MD5 > KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip.md5
          certutil -hashfile KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip SHA256 > KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-${{ steps.version.outputs.version }}
          path: |
            release/*.zip
            release/*.md5
            release/*.sha256
          retention-days: 30
      
      - name: Create or update release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip
            release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip.md5
            release/KOOK-Forwarder-${{ steps.version.outputs.version }}-Windows.zip.sha256
          tag_name: ${{ steps.version.outputs.version }}
          name: KOOK消息转发系统 ${{ steps.version.outputs.version }} - 重大更新
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build summary
        shell: bash
        run: |
          echo "## ✅ Windows构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 生成的文件" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ls -lh release/*.zip release/*.md5 release/*.sha256 >> $GITHUB_STEP_SUMMARY || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 下载链接" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
