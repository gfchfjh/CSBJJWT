name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送v开头的标签，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

env:
  APP_NAME: KookForwarder
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 运行测试
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          cd backend
          pytest tests/ -v --tb=short

  # Windows构建
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install Playwright
        run: |
          cd backend
          playwright install chromium

      - name: Build backend
        run: |
          cd backend
          pyinstaller --name=kook-forwarder-backend ^
            --onefile ^
            --add-data "app;app" ^
            --hidden-import=playwright ^
            --hidden-import=playwright._impl._driver ^
            app/main.py

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Electron (Windows)
        run: |
          cd frontend
          npm run electron:build -- --win --x64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: frontend/dist-electron/*.exe
          retention-days: 7

  # macOS构建
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install Playwright
        run: |
          cd backend
          playwright install chromium

      - name: Build backend
        run: |
          cd backend
          pyinstaller --name=kook-forwarder-backend \
            --onefile \
            --add-data "app:app" \
            --hidden-import=playwright \
            --hidden-import=playwright._impl._driver \
            app/main.py

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Electron (macOS)
        run: |
          cd frontend
          npm run electron:build -- --mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: frontend/dist-electron/*.dmg
          retention-days: 7

  # Linux构建
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install Playwright
        run: |
          cd backend
          playwright install chromium --with-deps

      - name: Build backend
        run: |
          cd backend
          pyinstaller --name=kook-forwarder-backend \
            --onefile \
            --add-data "app:app" \
            --hidden-import=playwright \
            --hidden-import=playwright._impl._driver \
            app/main.py

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Electron (Linux)
        run: |
          cd frontend
          npm run electron:build -- --linux AppImage
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: frontend/dist-electron/*.AppImage
          retention-days: 7

  # 创建Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Read changelog
        id: changelog
        run: |
          if [ -f "docs/CHANGELOG.md" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            head -n 50 docs/CHANGELOG.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=查看完整更新日志请访问项目仓库" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            # KOOK消息转发系统 ${{ steps.get_version.outputs.VERSION }}

            ## 📦 下载
            
            请根据您的操作系统下载对应的安装包：
            
            - **Windows**: `KookForwarder-${{ steps.get_version.outputs.VERSION }}-Setup.exe`
            - **macOS**: `KookForwarder-${{ steps.get_version.outputs.VERSION }}.dmg`
            - **Linux**: `KookForwarder-${{ steps.get_version.outputs.VERSION }}.AppImage`

            ## 📝 更新日志

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## 🚀 快速开始

            1. 下载适合您系统的安装包
            2. 运行安装程序
            3. 按照配置向导完成设置
            4. 开始使用！

            ## 📚 文档

            - [完整用户手册](https://github.com/${{ github.repository }}/blob/main/docs/完整用户手册.md)
            - [Discord配置教程](https://github.com/${{ github.repository }}/blob/main/docs/Discord配置教程.md)
            - [Telegram配置教程](https://github.com/${{ github.repository }}/blob/main/docs/Telegram配置教程.md)
            - [飞书配置教程](https://github.com/${{ github.repository }}/blob/main/docs/飞书配置教程.md)

            ## ⚠️ 注意事项

            - 本软件仅供学习交流使用
            - 使用前请仔细阅读免责声明
            - 不当使用可能导致账号被封禁

            ---

            如有问题，请提交 [Issue](https://github.com/${{ github.repository }}/issues)
          files: |
            artifacts/windows-build/*
            artifacts/macos-build/*
            artifacts/linux-build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建Docker镜像（可选）
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kook-forwarder:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kook-forwarder:${{ steps.get_version.outputs.VERSION }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kook-forwarder:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kook-forwarder:buildcache,mode=max
