name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.9.1)'
        required: false
        default: ''

jobs:
  # 构建Windows版本
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          playwright install chromium
      
      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Backend with PyInstaller
        run: |
          cd backend
          pip install pyinstaller
          pyinstaller --onefile --name kook-forwarder-backend app/main.py
      
      - name: Build Electron App (Windows)
        run: |
          cd frontend
          npm run electron:build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: KookForwarder-Windows
          path: frontend/dist-electron/*.exe
          retention-days: 7
  
  # 构建macOS版本
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          playwright install chromium
      
      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Backend with PyInstaller
        run: |
          cd backend
          pip install pyinstaller
          pyinstaller --onefile --name kook-forwarder-backend app/main.py
      
      - name: Build Electron App (macOS)
        run: |
          cd frontend
          npm run electron:build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 如果需要代码签名，请添加以下环境变量
          # CSC_LINK: ${{ secrets.MAC_CERTIFICATE }}
          # CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v3
        with:
          name: KookForwarder-macOS
          path: frontend/dist-electron/*.dmg
          retention-days: 7
  
  # 构建Linux版本
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6 xdg-utils libatspi2.0-0 libdrm2 libgbm1 libxcb-dri3-0
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          playwright install chromium --with-deps
      
      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Backend with PyInstaller
        run: |
          cd backend
          pip install pyinstaller
          pyinstaller --onefile --name kook-forwarder-backend app/main.py
      
      - name: Build Electron App (Linux)
        run: |
          cd frontend
          npm run electron:build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: KookForwarder-Linux
          path: frontend/dist-electron/*.AppImage
          retention-days: 7
  
  # 运行测试
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          playwright install chromium --with-deps
      
      - name: Run backend tests
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml
      
      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
  
  # 创建Release
  release:
    needs: [build-windows, build-macos, build-linux, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: KookForwarder-Windows
          path: ./artifacts/windows
      
      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: KookForwarder-macOS
          path: ./artifacts/macos
      
      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: KookForwarder-Linux
          path: ./artifacts/linux
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          
          # 从CHANGELOG.md提取当前版本的更新日志
          if [ -f "CHANGELOG.md" ]; then
            # 提取当前版本的内容（简化版）
            NOTES=$(awk "/^## \[?$VERSION/,/^## \[?[0-9]/ {print}" CHANGELOG.md | head -n -1)
            if [ -z "$NOTES" ]; then
              NOTES="请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解详细更新内容。"
            fi
          else
            NOTES="KOOK消息转发系统 $VERSION 发布。"
          fi
          
          # 保存到文件
          echo "$NOTES" > release_notes.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: KOOK消息转发系统 ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          files: |
            ./artifacts/windows/*.exe
            ./artifacts/macos/*.dmg
            ./artifacts/linux/*.AppImage
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify Release
        run: |
          echo "✅ Release ${{ steps.get_version.outputs.VERSION }} created successfully!"
          echo "📦 Artifacts uploaded:"
          ls -lh ./artifacts/windows/
          ls -lh ./artifacts/macos/
          ls -lh ./artifacts/linux/
